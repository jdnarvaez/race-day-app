{"version":3,"file":"1.js","sources":["webpack:///./src/services/JsLog.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*global define, global, amd, window*/\n\n/*jslint white: true*/\n\n/*jshint multistr: true */\n(function (f, define) {\n  'use strict';\n\n  define([], f);\n})(function () {\n  'use strict';\n\n  var JsLogExport,\n      LOGGER_HOST = 'jslog.me',\n      LOGGER_PATH = '/log',\n      LOGGER_URL = '//' + LOGGER_HOST + LOGGER_PATH,\n      SEND_POSTPONE_INTERVAL = 10000,\n      SERVER_REQUEST_TIMEOUT = 10000,\n      MAX_PACKET_SIZE = 4 * 1024 * 1024,\n      MAX_PENDING_PACKET_SIZE = 5240,\n      DEFAULT_MAX_POSTPONE_SIZE = 1024 * 1024,\n      JSLOG_ME_LOCALSTORAGE = 'JSLOG_ME_POSTPONED_ITEMS',\n      DEFAULT_PROTOCOL = 'http:',\n      consoleHookSet = false,\n      hostId;\n\n  (function () {\n    function JsLogOptions() {\n      this.enabled = true;\n      this.logUncaughtExceptions = true;\n      this.hookConsole = true;\n      this.trackHost = true;\n      this.collectSystemInfo = true;\n      this.trackLaunches = true;\n      this.key = '';\n      this.version = '';\n      this.sessionId = this.guid();\n    }\n\n    JsLogOptions.prototype.guid = function () {\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n\n      return function () {\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n      };\n    }();\n\n    function SenderService() {\n      this.inOperation = false;\n      this.xmlHttpRequest = createRequest();\n      this.http = null;\n\n      if (!this.xmlHttpRequest) {\n        try {\n          this.http = require('http');\n        } catch (e) {\n          this.http = null;\n        }\n      }\n    }\n\n    SenderService.prototype.sendXmlHttpRequest = function (protocol, postData, forceSend, successHandler, failHandler) {\n      var that = this,\n          xmlHttpRequest = this.xmlHttpRequest; //\n\n      this.inOperation = true;\n      xmlHttpRequest.open(\"POST\", protocol + LOGGER_URL, true);\n      xmlHttpRequest.timeout = SERVER_REQUEST_TIMEOUT;\n      xmlHttpRequest.setRequestHeader(\"Content-Type\", 'application/json; charset=UTF-8');\n\n      xmlHttpRequest.onreadystatechange = function () {\n        if (xmlHttpRequest.readyState === 4) {\n          that.inOperation = false;\n\n          if (xmlHttpRequest.status === 200 || xmlHttpRequest.status === 400) {\n            // Request sent successfully\n            successHandler(postData);\n          } else {\n            // Fail handler\n            failHandler(postData);\n          }\n        }\n      };\n\n      try {\n        xmlHttpRequest.send(postData);\n      } catch (e) {\n        failHandler(postData);\n      }\n    };\n\n    SenderService.prototype.sendNodeJsHttpRequest = function (protocol, postData, forceSend, successHandler, failHandler) {\n      // An object of options to indicate where to post to\n      var post_options = {\n        host: LOGGER_HOST,\n        port: '80',\n        path: LOGGER_PATH,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      },\n          post_req = this.http.request(post_options, function (res) {}); // post the data\n\n      post_req.write(postData);\n      post_req.end();\n    };\n    /**\n     *\n     * @param {string} protocol\n     * @param {string} postData\n     * @param {boolean} forceSend\n     * @param {Function} successHandler\n     * @param {Function} failHandler\n     */\n\n\n    SenderService.prototype.sendPacket = function (protocol, postData, forceSend, successHandler, failHandler) {\n      if (this.inOperation) {\n        if (!forceSend) {\n          failHandler(postData);\n          return;\n        }\n      }\n\n      if (this.xmlHttpRequest) {\n        this.sendXmlHttpRequest(protocol, postData, forceSend, successHandler, failHandler);\n      } else if (this.http) {\n        this.sendNodeJsHttpRequest(protocol, postData, forceSend, successHandler, failHandler);\n      } else {}\n    };\n\n    function PendingQueue() {\n      this.timePrefix = getEpochTime() + '';\n      this.counter = 0;\n      this.postponed = {};\n      this.postponedLength = 0;\n      this.postponedSize = 0;\n      this.lastItem = undefined;\n      this.loadPostponedData();\n    }\n    /**\n     * Initial load of pending queue stored in local storage\n     * @return {*}\n     */\n\n\n    PendingQueue.prototype.loadPostponedData = function () {\n      if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object' && window && window.localStorage) {\n        try {\n          this.postponed = {};\n          this.lastItem = undefined;\n          this.postponedSize = 0;\n          var prefixLength = JSLOG_ME_LOCALSTORAGE.length,\n              count = 0;\n\n          for (var idx in window.localStorage) {\n            if (window.localStorage.hasOwnProperty(idx) && idx.indexOf(JSLOG_ME_LOCALSTORAGE) === 0) {\n              var key = idx.substr(prefixLength);\n              this.lastItem = key;\n              this.postponed[key] = window.localStorage[idx];\n              this.postponedSize = this.postponedSize + this.postponed[key].length;\n              count++;\n            }\n          }\n\n          this.postponedLength = count;\n\n          if (count) {\n            return this.postponed;\n          } else {\n            return undefined;\n          }\n        } catch (e) {\n          return undefined;\n        }\n      } else {\n        return undefined;\n      }\n    };\n    /**\n     * Store postponed item\n     * @param {string} lastItem\n     * @param {string} packetData\n     */\n\n\n    function storePostponedItem(lastItem, packetData) {\n      if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object' && window && window.localStorage) {\n        try {\n          window.localStorage[JSLOG_ME_LOCALSTORAGE + lastItem] = packetData;\n        } catch (e) {}\n      }\n    }\n    /**\n     * Add packet\n     * @param {string} packedData\n     */\n\n\n    PendingQueue.prototype.add = function (packedData) {\n      function appendNewItem() {\n        that.counter++;\n        that.lastItem = that.timePrefix + that.counter;\n        that.postponed[that.lastItem] = packedData;\n        that.postponedSize = that.postponedSize + packedData.length;\n        storePostponedItem(that.lastItem, packedData);\n      }\n\n      var that = this;\n\n      if (that.postponedSize > DEFAULT_MAX_POSTPONE_SIZE) {\n        return;\n      }\n\n      if (this.lastItem) {\n        var lastData = this.postponed[that.lastItem];\n\n        if (lastData.length > MAX_PENDING_PACKET_SIZE) {\n          appendNewItem();\n        } else {\n          var newData = mergePackedArrays(lastData, packedData);\n          that.postponed[that.lastItem] = newData;\n          storePostponedItem(that.lastItem, newData);\n          that.postponedSize = that.postponedSize + newData.length - lastData.length;\n        }\n      } else {\n        appendNewItem();\n      }\n    };\n\n    var PACKET_REGEXP = /^\\s*\\[\\s*(.+)\\s*\\]\\s*$/;\n    /**\n     *\n     * @param {string} packedArray1\n     * @param {string} packedArray2\n     */\n\n    function mergePackedArrays(packedArray1, packedArray2) {\n      var internals1 = packedArray1.match(PACKET_REGEXP),\n          internals2 = packedArray2.match(PACKET_REGEXP);\n\n      if (internals1 && internals2 && internals1.length > 1 && internals2.length > 1) {\n        return '[' + internals1[1] + ', ' + internals2[1] + ']';\n      } else if (internals1) {\n        return packedArray1;\n      } else if (internals2) {\n        return packedArray2;\n      } else {\n        return '[]';\n      }\n    }\n    /**\n     * Returns number of postponed items\n     * @return {Number}\n     */\n\n\n    PendingQueue.prototype.haveItems = function () {\n      return this.postponedLength;\n    };\n    /**\n     * Fetch a single item from pending queue\n     * @return {*}\n     */\n\n\n    PendingQueue.prototype.fetchItem = function () {\n      if (!this.postponedLength) {\n        return undefined;\n      }\n\n      for (var idx in this.postponed) {\n        if (this.postponed.hasOwnProperty(idx)) {\n          return {\n            key: idx,\n            value: this.postponed[idx]\n          };\n        }\n      }\n\n      return undefined;\n    };\n    /**\n     * Delete item from pending queue\n     * @param {string} itemName\n     */\n\n\n    PendingQueue.prototype.deleteItem = function (itemName) {\n      this.postponedLength--;\n      this.postponedSize = this.postponedSize - this.postponed[itemName].length;\n      delete this.postponed[itemName];\n\n      if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object' && window && window.localStorage) {\n        try {\n          delete window.localStorage[JSLOG_ME_LOCALSTORAGE + itemName];\n        } catch (e) {}\n      }\n\n      if (this.lastItem === itemName) {\n        this.lastItem = undefined;\n      }\n    };\n\n    function PendingSenderService(protocol,\n    /**SenderService*/\n    sender,\n    /**PendingQueue*/\n    queue,\n    /**JsLog*/\n    logger) {\n      this.protocol = protocol;\n      this.sender = sender;\n      this.queue = queue;\n      this.logger = logger;\n      this.start();\n    }\n\n    PendingSenderService.prototype.sendPendingItem = function () {\n      if (this.sender.inOperation || !this.queue.haveItems()) {\n        return;\n      }\n\n      var item = this.queue.fetchItem(),\n          that = this;\n\n      if (item) {\n        var key = item.key,\n            value = item.value;\n        this.sender.sendPacket(this.protocol, value, false, function () {\n          // success handler\n          that.queue.deleteItem(key);\n          that.sendPendingItem();\n        }, function () {\n          // fail handler\n          postponeWorkingQueue(that.logger);\n        });\n      }\n    };\n\n    PendingSenderService.prototype.start = function () {\n      if (this.handle) {\n        return;\n      }\n\n      var that = this;\n      this.handle = setInterval(function () {\n        that.sendPendingItem();\n      }, SEND_POSTPONE_INTERVAL);\n    };\n\n    PendingSenderService.prototype.stop = function () {\n      if (this.handle) {\n        clearInterval(this.handle);\n        this.handle = undefined;\n      }\n    };\n\n    function JsLog(options) {\n      this.options = new JsLogOptions();\n\n      if (options !== undefined) {\n        this.options = this.parseOptions(options);\n      }\n\n      this.protocol = 'https:';\n      this.systemInfoSent = false;\n      this._batchQueue = [];\n      this._packetSize = 0;\n      this.senderService = new SenderService();\n      this.pendingSenderService = new PendingSenderService(this.protocol, this.senderService, pendingQueue, this);\n      this.init();\n    }\n    /**\n     *\n     * @param {JsLog} that\n     */\n\n\n    function postponeWorkingQueue(that) {\n      if (that._batchQueue.length) {\n        var packetData = generatePacketData(that);\n        that.postpone(packetData);\n      }\n    }\n    /**\n     * Raw sender\n     * @param {string} protocol\n     * @param {JsLog} that\n     * @param {string|undefined} postData\n     * @param {bool} [forceSend=false]\n     */\n\n\n    function rawSendToServer(protocol, that, postData, forceSend) {\n      forceSend = !!forceSend;\n\n      if (batchQueueSize(that) > MAX_PACKET_SIZE) {\n        var oldData = generatePacketData(that);\n        that.postpone(oldData);\n      }\n\n      if (postData) {\n        addToBatch(that, postData);\n      }\n\n      if ((!that.senderService.inOperation || forceSend) && that._batchQueue.length) {\n        var packetData = generatePacketData(that);\n        that.senderService.sendPacket(protocol, packetData, forceSend, function () {\n          // Success handler\n          rawSendToServer(protocol, that, undefined, false);\n        }, function () {\n          // Fail handler\n          that.postpone(packetData);\n          rawSendToServer(protocol, that, undefined, false);\n        });\n      }\n    }\n    /**\n     * Add message to a batch\n     *\n     * @param {JsLog} that\n     * @param {string} postData\n     */\n\n\n    function addToBatch(that, postData) {\n      that._batchQueue.push(postData);\n    }\n    /**\n     * Generate a packet from queue\n     * @param {JsLog} that\n     * @returns string\n     */\n\n\n    function generatePacketData(that) {\n      var result = '[' + that._batchQueue.join(', ') + ']';\n      that._batchQueue = [];\n      return result;\n    }\n    /**\n     * Get apx queue size in chars\n     * @param {JsLog} that\n     * @return {number}\n     */\n\n\n    function batchQueueSize(that) {\n      var size = 0;\n\n      for (var i = 0; i < that._batchQueue.length; i++) {\n        size = size + that._batchQueue[i].length;\n      }\n\n      return size;\n    }\n\n    JsLog.prototype.renewSession = function () {\n      this.options.sessionId = this.options.guid();\n      this.systemInfoSent = false;\n    };\n\n    JsLog.prototype.parseOptions = function (options) {\n      var result = new JsLogOptions();\n\n      for (var idx in options) {\n        if (options.hasOwnProperty(idx) && result.hasOwnProperty(idx)) {\n          result[idx] = options[idx];\n        }\n      }\n\n      return result;\n    };\n\n    JsLog.prototype.sendToServer = function (key, eventType, data) {\n      if (!this.options.enabled) {\n        return;\n      }\n\n      if (data instanceof Error) {\n        data = exceptionToObject(data);\n      }\n\n      var rawData = {\n        key: key,\n        sessionId: this.options.sessionId,\n        hostId: hostId,\n        time: getEpochTime(),\n        type: eventType,\n        data: data\n      },\n          packetData = JSON.stringify(rawData);\n      rawSendToServer(this.protocol, this, packetData);\n    };\n\n    function bind(context, fn) {\n      return function () {\n        return fn.apply(context, arguments);\n      };\n    }\n\n    function getEpochTime() {\n      if (Date.now) {\n        return Date.now();\n      } else {\n        return new Date().getTime();\n      }\n    }\n    /**\n     * Get HTTP request object\n     *\n     * @returns XMLHttpRequest\n     */\n\n\n    function createRequest() {\n      try {\n        if (typeof XMLHttpRequest === 'undefined') {\n          XMLHttpRequest = function XMLHttpRequest() {\n            try {\n              return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\n            } catch (e) {}\n\n            try {\n              return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\n            } catch (e) {}\n\n            try {\n              return new ActiveXObject(\"Msxml2.XMLHTTP\");\n            } catch (e) {}\n\n            try {\n              return new ActiveXObject(\"Microsoft.XMLHTTP\");\n            } catch (e) {}\n\n            throw new Error('XMLHttpRequest not supported');\n          };\n        }\n\n        return new XMLHttpRequest();\n      } catch (e) {\n        return undefined;\n      }\n    }\n\n    function initialSystemInfo(\n    /**JsLog*/\n    log) {\n      if (!log.systemInfoSent) {\n        log.systemInfo(log.options.collectSystemInfo);\n      }\n    }\n\n    JsLog.prototype.postpone = function (packetData) {\n      pendingQueue.add(packetData);\n    };\n\n    JsLog.prototype.log = function () {\n      try {\n        initialSystemInfo(this);\n        var sendArgs = arguments.length > 1 ? arguments : arguments[0];\n        this.sendToServer(this.options.key, 'log', sendArgs);\n\n        if (typeof oldConsoleLog === 'function') {\n          oldConsoleLog.apply(console, arguments);\n        }\n      } catch (e) {}\n    };\n\n    JsLog.prototype.expand = function (data) {\n      var visitedObjects = [];\n\n      function expandOneLevel(data) {\n        if (_typeof(data) !== 'object' || data === null) {\n          return data;\n        }\n\n        var result = {},\n            properties = Object.getOwnPropertyNames(data).sort();\n        visitedObjects.push(data);\n\n        for (var key in properties) {\n          if (properties.hasOwnProperty(key)) {\n            var propertyName = properties[key],\n                propertyValue = data[propertyName];\n\n            if (typeof propertyValue === 'undefined' || typeof propertyValue === 'function') {\n              continue;\n            }\n\n            if (visitedObjects.indexOf(propertyValue) >= 0) {\n              propertyValue = '<circular ref>';\n            }\n\n            result[propertyName] = expandOneLevel(propertyValue);\n          }\n        }\n\n        visitedObjects.pop();\n        return result;\n      }\n\n      return expandOneLevel(data);\n    };\n\n    JsLog.prototype.info = function () {\n      try {\n        initialSystemInfo(this);\n        var sendArgs = arguments.length > 1 ? arguments : arguments[0];\n        this.sendToServer(this.options.key, 'info', sendArgs);\n\n        if (typeof oldConsoleInfo === 'function') {\n          oldConsoleInfo.apply(console, arguments);\n        }\n      } catch (e) {}\n    };\n\n    JsLog.prototype.warn = function () {\n      try {\n        initialSystemInfo(this);\n        var sendArgs = arguments.length > 1 ? arguments : arguments[0];\n        this.sendToServer(this.options.key, 'warn', sendArgs);\n\n        if (typeof oldConsoleWarn === 'function') {\n          oldConsoleWarn.apply(console, arguments);\n        }\n      } catch (e) {}\n    };\n\n    function expandParameters(sendArgs) {\n      if (sendArgs instanceof Array) {\n        // multiple args\n        var result = [];\n\n        for (var idx in sendArgs) {\n          if (sendArgs.hasOwnProperty(idx)) {\n            result.push(JsLog.prototype.expand(sendArgs[idx]));\n          }\n        }\n\n        return result;\n      } else {\n        // single arg\n        return JsLog.prototype.expand(sendArgs);\n      }\n    }\n\n    JsLog.prototype.error = function () {\n      try {\n        initialSystemInfo(this);\n        var sendArgs = arguments.length > 1 ? arguments : arguments[0];\n        this.sendToServer(this.options.key, 'error', expandParameters(sendArgs));\n\n        if (typeof oldConsoleError === 'function') {\n          oldConsoleError.apply(console, arguments);\n        }\n      } catch (e) {}\n    };\n\n    JsLog.prototype.exception = function (data) {\n      try {\n        initialSystemInfo(this);\n        var sendArgs = arguments.length > 1 ? arguments : arguments[0];\n        this.sendToServer(this.options.key, 'exception', expandParameters(sendArgs));\n\n        if (typeof oldConsoleException === 'function') {\n          oldConsoleException.apply(console, arguments);\n        }\n      } catch (e) {}\n    };\n\n    JsLog.prototype.systemInfo = function (fillRealData) {\n      try {\n        var systemInfoData = {};\n\n        if (fillRealData && (typeof navigator === \"undefined\" ? \"undefined\" : _typeof(navigator)) === 'object') {\n          systemInfoData.userAgent = navigator.userAgent;\n          systemInfoData.platform = navigator.platform;\n          systemInfoData.version = this.options.version;\n        } else {\n          systemInfoData.userAgent = '';\n          systemInfoData.platform = '';\n          systemInfoData.version = this.options.version;\n        }\n\n        this.systemInfoSent = true;\n        this.sendToServer(this.options.key, 'systemInfo', systemInfoData);\n      } catch (e) {}\n    };\n\n    function exceptionToObject(exception) {\n      var result = {};\n\n      if (!exception) {\n        return result;\n      }\n\n      if (typeof exception.name !== 'undefined') {\n        result.name = exception.name;\n      }\n\n      if (typeof exception.message !== 'undefined') {\n        result.message = exception.message;\n      }\n\n      if (typeof exception.stack !== 'undefined') {\n        result.stack = exception.stack;\n      }\n\n      if (typeof exception.fileName !== 'undefined') {\n        result.fileName = exception.fileName;\n      }\n\n      if (typeof exception.lineNumber !== 'undefined') {\n        result.lineNumber = exception.lineNumber;\n      }\n\n      if (typeof exception.columnNumber !== 'undefined') {\n        result.columnNumber = exception.columnNumber;\n      }\n\n      if (typeof exception.description !== 'undefined') {\n        result.description = exception.description;\n      }\n\n      return result;\n    }\n\n    JsLog.prototype.init = function () {\n      if (!this.options.enabled) {\n        return;\n      }\n\n      this.pendingSenderService.sendPendingItem();\n\n      if (this.options.trackHost) {\n        this.trackHost();\n      }\n\n      if (this.options.hookConsole) {\n        this.hookConsole();\n      }\n\n      if (this.options.logUncaughtExceptions) {\n        this.hookUncaughtExceptions();\n      }\n\n      if (this.options.trackLaunches) {\n        this.systemInfo(this.options.collectSystemInfo);\n      }\n    };\n\n    var oldConsoleLog, oldConsoleWarn, oldConsoleError, oldConsoleInfo, oldConsoleException;\n\n    JsLog.prototype.trackHost = function () {\n      if (hostId) {\n        return;\n      } // put tracking option in local storage\n\n\n      if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object' && 'localStorage' in window && window.localStorage !== null) {\n        try {\n          hostId = window.localStorage.getItem('JsLogToken');\n        } catch (e) {\n          hostId = null;\n        }\n\n        if (!hostId) {\n          hostId = JsLogOptions.prototype.guid();\n\n          try {\n            window.localStorage.setItem('JsLogToken', hostId);\n          } catch (e) {}\n        }\n      } else {\n        hostId = JsLogOptions.prototype.guid();\n      }\n    };\n\n    JsLog.prototype.hookConsole = function () {\n      if (consoleHookSet) {\n        // console already defined\n        return;\n      }\n\n      if (typeof console !== 'undefined') {\n        oldConsoleLog = console.log;\n        oldConsoleWarn = console.warn;\n        oldConsoleError = console.error;\n        oldConsoleInfo = console.info;\n        oldConsoleException = console.exception; // console.log = bind(this,this.log);\n        // console.warn = bind(this,this.warn);\n\n        console.error = bind(this, this.error); // console.info = bind(this,this.info);\n\n        console.exception = bind(this, this.exception);\n      } else {\n        console = {\n          // log: bind(this,this.log),\n          // warn: bind(this,this.warn),\n          error: bind(this, this.error),\n          // info: bind(this,this.info),\n          exception: bind(this, this.exception)\n        };\n      }\n\n      consoleHookSet = true;\n    };\n\n    JsLog.prototype.hookUncaughtExceptions = function () {\n      // Browser\n      if (typeof window !== 'undefined') {\n        window.onerror = bind(this, this.windowErrorHandler);\n      } // NodeJS\n\n\n      if (typeof process !== 'undefined') {\n        process.on('uncaughtException', bind(this, this.windowErrorHandler));\n      }\n    };\n\n    JsLog.prototype.windowErrorHandler = function (msg, url, line, column, errorObj) {\n      if (!this.options.enabled) {\n        return;\n      }\n\n      try {\n        if (errorObj) {\n          this.sendToServer(this.options.key, 'uncaughtException', {\n            msg: msg,\n            url: url,\n            line: line,\n            column: column,\n            errorObj: exceptionToObject(errorObj)\n          });\n        } else {\n          this.sendToServer(this.options.key, 'uncaughtException', exceptionToObject(msg));\n        }\n      } catch (e) {}\n    };\n\n    var pendingQueue = new PendingQueue(); // singleton\n\n    if (typeof window !== 'undefined') {\n      window.JsLog = window.JsLog || JsLog;\n    }\n\n    JsLogExport = JsLog;\n  })();\n\n  return JsLogExport;\n}, typeof define == 'function' && define.amd ? define : function (_, f) {\n  if (typeof module !== 'undefined') {\n    module.exports = f();\n  } else {\n    f();\n  }\n});"],"mappingsiGAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}